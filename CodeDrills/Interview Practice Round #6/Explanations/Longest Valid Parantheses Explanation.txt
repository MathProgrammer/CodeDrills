We will maintain a stack where we will push open brackets
When we meet a closed bracket, we will match it with the top of the stack. 
This is the last unmatched open bracket. 

We will do this for the entire string and find out the end point of the first legal sequence beginning at i, for each i. 

-----

If S1 and S2 are legal sequences, S1 + S2 is also a legal sequence. 

So, check if ending[i] + 1 is an open bracket and has a legal ending. 

If yes, update length[i] = length[i] + length(ending[i] + 1) 

------

#include <string>
#include <stack>
#include <vector>

using namespace std;
class LongestValidParentheses {
public:
	int getLongestValidParentheses(string S) {
		// Code here
		
		vector <int> ending_index(S.size(), -1);
		stack <int> index;
		for(int i = 0; i < S.size(); i++)
		{
			switch(S[i])
			{
				case '(': index.push(i); break;
				case ')': if(!index.empty())
						    {
								ending_index[index.top()] = i;
								index.pop();
							}
			}
		}
		
		int answer = 0;
		vector <int> length(S.size(), 0);
		for(int i = S.size() - 1; i >= 0; i--)
		{
			if(S[i] == '(' && ending_index[i] != -1)
			{
				length[i] = ending_index[i]  - i + 1;
				
				int next = ending_index[i] + 1;
				
				if(next < S.size() && S[next] == '(')
				{
					length[i] += length[next];
				}
			}
			
			answer = max(answer, length[i]);
		}
		
		return answer;
	}
};
