Let us first solve the problem of counting the number of pairs such that XOR(A[i], A[j]) < X 

We can then count the number of pairs XOR(A[i], A[j]) < R + 1 and XOR(A[i], A[j]) < L and subtract them to get our answer. 

-----

If A < B, then it means 

1. A and B have some common prefix 
2. A has a 0 where B has a 1 
3. A and B can have anything after that. 

------

We will keep track of the frequency of each binary prefix of each of the N numbers. 

For every integer A[i], we will count the number of integers with a good prefix. 

A prefix is said to be good if XOR-ing with it results in a 'small' prefix in R 

A 'small' prefix in R is a prefix which matches R till some point and then has a 0 where it has a 1 

If R = 100100100001, then these are the 'small' prefixes

1. 0_
2. 1000_
3. 10001000_
4. 100100100000

We will count all integers who's XOR results in one of these 'small' prefixes. 

In order to do that, we will fix the XOR so it matches the prefix of R and then use a 0 where it has a 1

-----

This can be done in a more space efficient manner with a trie.

-----

class CountPairsWithXOR {
public:
	const int NO_OF_BITS = 31;
	map <string, int> prefix_frequency;
	
	int is_bit_set(int n, int bit)
	{
		return ( ( n & (1 << bit) ) != 0);
	}
	
	void insert(int x)
	{
		string prefix;
		
		for(int bit = NO_OF_BITS; bit >= 0; bit--)
		{
			prefix += (is_bit_set(x, bit) ? "1" : "0");
			
			prefix_frequency[prefix]++;
		}
	}
	
	int count_less_than(int N, int x)
	{
		int count = 0;
		
		string prefix; 
		
		for(int bit = NO_OF_BITS; bit >= 0; bit--)
		{
			string current_prefix = prefix; 
			
			if(is_bit_set(N, bit))
			{
				current_prefix += (is_bit_set(x, bit) ? "1" : "0"); 
				
				count += prefix_frequency[current_prefix];
			}
			
			prefix += (is_bit_set(N, bit) == is_bit_set(x, bit) ? "0" : "1");
		}
		
		return count;
	}
	
	int getCountOfPairs(vector<int> A, int L, int R) 
	{	
		int pairs = 0;
		for(int i = 0; i < A.size(); i++)
		{
			pairs += count_less_than(R + 1, A[i]) - count_less_than(L, A[i]);
			
			insert(A[i]);
		}
		
		return pairs;
	}
};
